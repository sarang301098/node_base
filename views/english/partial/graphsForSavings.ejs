<%
        var defectiveRollColor='rgba(19,79,92,1)';
        var defectColorStopsGraph=['#D2EBEF', '#8ECDD6' , '#2E7C85' , '#09262B', '#D2EBEF'];
        var defectPerShiftGraphColors = ['#8ECDD6' , '#2E7C85' , '#09262B']
        var defectColorStopsPerDefectGraph = {
          'Point':'#8ECDD6' ,
          'Horizontal':'#2E7C85' ,
          'Vertical':'#09262B',
          'Oil':'#83C5BE'
        };
        %>

<script>
  window.onload = function () {
    var graphDataFactory = JSON.parse('<%- graphDataFactory %>');
    var graphDataCkm = JSON.parse('<%- graphDataCkms %>');
    var machinePerformanceData = JSON.parse('<%- machinePerformances %>')
    var machines = JSON.parse('<%- machines %>')
    var totalCkms = machines.length;

    <%- include('./stopsPerShiftGraphsForFactory.ejs') %>

    <%- include('./stopsPerDefectTypeGraphsForFactory.ejs') %>

    <%- include('./stopsGraphForFactory.ejs') %>

    function loadCkmGraphs() {
      const ckmsStopsGraph = (ckmNumber) => {
        var id = 'ckmStops' + ckmNumber;
        var res = graphDataCkm[ckmNumber].stopsData;
        var backgroundColor = [];
        var defectColor = JSON.parse(`<%- JSON.stringify(defectColorStopsGraph) %>`);
        let options = {};
        let datesData = [];
        let data = {
          dataset: [{ label: "Detected", data: [] }],
          total: 0,
        };
        let limit = 0;
        if (res.data && res.data.groups) {
          Object.entries(res.data.groups).forEach(([date, count]) => {
            if (date !== "total") {
              limit = Math.max(limit, count.data.total);
              datesData.push(count.data.weekNumber);
              backgroundColor.push(defectColor[(count.data.weekNumber - 1)%4]);
              data.dataset[0].data.push(count.data.total);
            }
          });
        }

        data.total = res.totalStops;
        data.labels = datesData;

        var dataSet = {
          labels: data.labels,
          datasets: data.dataset.map((obj) => ({
            ...obj,
            backgroundColor
          })),
        };

        let stopsCkm = new Chart(document.getElementById(id), {
          plugins:[ChartDataLabels],
          type: "bar",
          data: dataSet,
          options: {
            layout: {
              padding: {
                top: 30
              }
            },
            spanGaps: false,
            legend: {
              display: false,
              position: "bottom",
            },
            aspectRatio: 2,
            maintainAspectRatio: false,
            scales: {
              xAxes: [
                {
                  scaleLabel: {
                    display: true,
                    labelString: 'Week',
                    fontColor: '#000000',
                    fontSize: 18,
                  },
                  display: true,
                  gridLines: { display: false },
                  ticks: {
                    min: 1,
                    fontColor: '#000000',
                    fontSize: 16,
                  },
                },
              ],
              yAxes: [
                {
                  scaleLabel: {
                    display: true,
                  },
                  display: true,
                  ticks: {
                    callback: function(value) {
                        return Math.abs(Math.ceil(value) - value) > 0 ? undefined : value;
                      },
                    min: 0,
                    fontColor: '#000000',
                    fontSize: 16,
                    autoSkip: true,
                    autoSkipPadding: 10,
                  },
                },
              ],
            },
            plugins: {
              datalabels: {
                anchor: 'end',
                align: 'top',
                offset: 4,
                font: {
                  size: '16',
                  weight: 'bold',
                  family: "'Titillium Web', sans-serif",
                },
              }
            }
          },
        });
      }

      const ckmsStopsPerDefectTypeGraph = (ckmNumber) => {
        var id = 'ckmStopsPerDefectType' + ckmNumber;
        var res = graphDataCkm[ckmNumber].stopsPerDefectData.data;
        var defectColor = JSON.parse(`<%- JSON.stringify(defectColorStopsPerDefectGraph) %>`);
        var limit = 0;
        var stepSize = graphDataFactory.stopsPerDefectData.totalStops;
        let data = {
          dataset: [{ label: "Stops per Defect Type", data: [] }],
          total: 0,
        };
        let weeks = [],
          dataset = [];

        let completeDefects = {};
        if (res && res.groups) {
          Object.entries(res.groups).forEach(([date, count]) => {
            let totalCount = 0;
            Object.keys(count.data).forEach((ele) => {
              if (ele !== 'weekNumber') {
              totalCount += count.data[ele];
              if (count.data[ele]) {
                stepSize = Math.min(stepSize, count.data[ele]);
              }
              if (Array.isArray(completeDefects[ele])) {
                completeDefects[ele] = [
                  ...completeDefects[ele],
                  count.data[ele],
                ];
              } else {
                completeDefects[ele] = [
                  completeDefects[ele],
                  count.data[ele],
                ];
              }
            }
            });
            limit = Math.max(limit, totalCount);
            weeks.push(count.data.weekNumber);
          });
        }
        Object.keys(completeDefects).map((defect) => {
          completeDefects[defect] = completeDefects[defect].slice(
            1,
            completeDefects[defect].length
          );
        });

        var colorIndex = 0;
        data.total = graphDataFactory.stopsPerDefectData.totalStops;
        Object.keys(completeDefects).map((defect) => {
          dataset.push({
            label: defect,
            data: completeDefects[defect],
            backgroundColor: defectColor[defect],
            datalabels: {
              color: defectColor[defect],
              // display: 'auto',
            },
            hoverBackgroundColor: defectColor[defect],
            hoverBorderWidth: 2,
          });
        });

        var stopsPerDefectTypeFactory = new Chart(
          document.getElementById(id),
          {
            plugins:[ChartDataLabels],
            type: "bar",
            data: {
              labels: weeks,
              datasets: dataset,
            },
            aspectRatio: 2,
            options: {
              layout: {
                padding: {
                  top: 30
                },
              },
              maintainAspectRatio: false,
              scales: {
                xAxes: [
                  {
                    scaleLabel: {
                      display: true,
                      labelString: 'Week',
                      fontColor: '#000000',
                      fontSize: 18,
                    },
                    stacked: false,
                    gridLines: { display: false },
                    display: true,
                    ticks: {
                      fontColor: '#000000',
                      fontSize: 16,
                    },
                  },
                ],
                yAxes: [
                  {
                    scaleLabel: {
                      display: true,
                    },
                    ticks: {
                      callback: function(value) {
                        return Math.abs(Math.ceil(value) - value) > 0 ? undefined : value;
                      },
                      min: 0,
                      fontColor: '#000000',
                      fontSize: 16,
                      autoSkip: true,
                      autoSkipPadding: 10,
                    },
                    stacked: false,
                    display: true,
                    gridLines: { display: true }
                  },
                ],
              }, // scales
              legend: {
                display: true,
                position: "right",
                labels: {
                  boxWidth: 10,
                },
                align: 'end',
              },
              plugins: {
                datalabels: {
                  anchor: 'end',
                  align: 'top',
                  offset: 4,
                  font: {
                  size: '16',
                  weight: 'bold',
                  family: "'Titillium Web', sans-serif",
                },
                }
              }
            },
          }
        );
      }

      const ckmsStopsPerShiftGraph = (ckmNumber) => {
        var id = 'ckmStopsPerShift' + ckmNumber;
        var res = graphDataCkm[ckmNumber].stopsPerShiftData.data;
        var defectColor = JSON.parse(`<%- JSON.stringify(defectPerShiftGraphColors) %>`);
        var limit = 0;
        var stepSize = graphDataCkm[ckmNumber].stopsPerShiftData.totalStops;
        let data = {
          dataset: [{ label: "Stops per shift", data: [] }],
          total: 0,
        };
        let weeks = [],
          dataset = [];
        let completeDefects = {};

        if (res && res.groups) {
          Object.entries(res.groups).forEach(([date, count]) => {
            let totalCount = 0;
            Object.keys(count.data).forEach((ele) => {
              if (ele !== 'weekNumber') {
              totalCount += count.data[ele];
            if (count.data[ele]) {
              stepSize = Math.min(stepSize, count.data[ele]);
            }
            if (Array.isArray(completeDefects[ele])) {
              completeDefects[ele] = [
                ...completeDefects[ele],
                count.data[ele],
              ];
            } else {
              completeDefects[ele] = [
                completeDefects[ele],
                count.data[ele],
              ];
            }
            }
            });
            limit = Math.max(limit, totalCount);
            weeks.push(count.data.weekNumber);
          });
        }
        Object.keys(completeDefects).map((defect) => {
          completeDefects[defect] = completeDefects[defect].slice(
            1,
            completeDefects[defect].length
          );
        });

        var colorIndex = 0;
        data.total = graphDataCkm[ckmNumber].stopsPerShiftData.totalStops;
        Object.keys(completeDefects).map((defect) => {
          dataset.push({
            label: (defect.slice(0,1).toUpperCase() + defect.slice(1)),
            data: completeDefects[defect],
            backgroundColor: defectColor[colorIndex],
            datalabels: {
              color: defectColor[colorIndex],
              // display: 'auto',
            },
            hoverBackgroundColor: defectColor[colorIndex++],
            hoverBorderWidth: 2,
          });
        });

        var stopsPerShiftCkmChart = new Chart(
          document.getElementById(id),
          {
            plugins:[ChartDataLabels],
            type: "bar",
            data: {
              labels: weeks,
              datasets: dataset,
            },
            aspectRatio: 2,
            options: {
              layout: {
                padding: {
                  top: 30
                },
              },
              maintainAspectRatio: false,
              scales: {
                xAxes: [
                  {
                    scaleLabel: {
                      display: true,
                      labelString: 'Week',
                      fontColor: '#000000',
                      fontSize: 18,
                    },
                    stacked: false,
                    gridLines: { display: false },
                    display: true,
                    ticks: {
                      fontColor: '#000000',
                      fontSize: 16,
                    },
                  },
                ],
                yAxes: [
                  {
                    scaleLabel: {
                      display: true,
                    },
                    ticks: {
                      callback: function(value) {
                        return Math.abs(Math.ceil(value) - value) > 0 ? undefined : value;
                      },
                      min: 0,
                      fontColor: '#000000',
                      fontSize: 16,
                      autoSkip: true,
                      autoSkipPadding: 10,
                    },
                    stacked: false,
                    display: true,
                    gridLines: { display: true }
                  },
                ],
              }, // scales
              legend: {
                display: true,
                position: "right",
                labels: {
                  boxWidth: 10,
                },
                align: 'end',
              },
              plugins: {
                datalabels: {
                  anchor: 'end',
                  align: 'top',
                  offset: 4,
                  font: {
                  size: '16',
                  weight: 'bold',
                  family: "'Titillium Web', sans-serif",
                },
                }
              }
            },
          }
        );
      }

      const ckmsStopsPerDefectTypeMonthGraph = (ckmNumber) => {
        var id = 'ckmStopsPerDefectTypeMonth' + ckmNumber;
        var res = graphDataCkm[ckmNumber].stopsPerDefectData.data;
        var defectColor = JSON.parse(`<%- JSON.stringify(defectColorStopsPerDefectGraph) %>`);
        let data = {
          dataset: [{ label: "Stops per defect type", data: [] }],
          total: 0,
        };
        let pointDefect = 0,
      horizontalDefect = 0,
      verticalDefect = 0,
      oilDefect = 0;

      if (res && res.groups) {
        Object.entries(res.groups).forEach(([date, count]) => {
          if (count.data.Point) {
            pointDefect += count.data.Point;
          }
          if (count.data.Horizontal) {
            horizontalDefect += count.data.Horizontal;
          }
          if (count.data.Vertical){
            verticalDefect += count.data.Vertical;
          }
          if (count.data.Oil) {
            oilDefect += count.data.Oil;
          }
        });
      }

    data.total = pointDefect + horizontalDefect + verticalDefect + oilDefect;

        var stopsPerDefectTypeCkmForMonthChart = new Chart(
          document.getElementById(id),
          {
            plugins:[ChartDataLabels],
            type: "doughnut",
            data: {
              labels: ['Point', 'Horizontal', 'Vertical', 'Oil'],
              datasets: [
                {
                  data: [pointDefect, horizontalDefect, verticalDefect, oilDefect],
                  backgroundColor: Object.values(defectColor),
                  hoverBorderWidth: 2,
                },
              ],
            },
            options: {
              plugins: {
                datalabels: {
                  anchor: 'center',
                  color: function(context) {
                  var index = context.dataIndex;
                  var value = context.dataset.data[index];
                  return value !== 0 ? (index === 0 ? 'black' : 'white') : 'white';
                },
                display: function(context) {
                  var index = context.dataIndex;
                  var value = context.dataset.data[index];
                  return value > 0;
                },
                font: {
                  size: '16',
                  weight: 'bold',
                  family: "'Titillium Web', sans-serif",
                },
                }
              },
              responsive: false,
              maintainAspectRatio: false,
              cutoutPercentage: 50,
              legend: {
                display: false,
                position: 'right',
              },
              tooltips: {
                backgroundColor: 'rgb(20,90,105)',
                displayColors: false,
                cornerRadius: 6,
                xPadding: 10,
                yPadding: 8,
                titleAlign: 'center',
                position: 'average',
                mode: 'label',
              },
              elements: {
                arc: {
                  borderWidth: '10px',
                },
              },
            },
          }
        );
      }
      const ckmsStopsPerShiftForMonthgraph = (ckmNumber) => {
        var id = 'ckmStopsPerShiftMonth' + ckmNumber;
        var res = graphDataCkm[ckmNumber].stopsPerShiftData.data;
        var defectColor = JSON.parse(`<%- JSON.stringify(defectPerShiftGraphColors) %>`);
        let data = {
          dataset: [{ label: "Stops per shift", data: [] }],
          total: 0,
        };

        let shiftNames = graphDataFactory.stopsPerShiftData.shiftNames;
        let defaultShiftCounts = {};

        shiftNames.forEach((shiftName) => {
          defaultShiftCounts[shiftName] = 0;
        });

        if (res && res.groups) {
          Object.entries(res.groups).forEach(([index, obj]) => {
              Object.entries(obj.data).forEach(([shiftName, count]) => {
                if (shiftName !== 'weekNumber') {
                defaultShiftCounts[shiftName] += count;
              }
              });
            });
          }

        let dataset = Object.values(defaultShiftCounts);

        var stopsPerShiftCkmForMonthChart = new Chart(
          document.getElementById(id),
          {
            plugins:[ChartDataLabels],
            type: "doughnut",
            data: {
              labels: shiftNames,
              datasets: [
                {
                  data: dataset,
                  backgroundColor: defectColor,
                  hoverBorderWidth: 2,
                },
              ],
            },
            options: {
              plugins: {
                datalabels: {
                  anchor: 'center',
                  color: function(context) {
                  var index = context.dataIndex;
                  var value = context.dataset.data[index];
                  return value !== 0 ? (index === 0 ? 'black' : 'white') : 'white';
                },
                display: function(context) {
                  var index = context.dataIndex;
                  var value = context.dataset.data[index];
                  return value > 0;
                },
                font: {
                  size: '16',
                  weight: 'bold',
                  family: "'Titillium Web', sans-serif",
                },
                }
              },
              responsive: false,
              maintainAspectRatio: false,
              cutoutPercentage: 50,
              legend: {
                display: false,
                position: 'right',
              },
              tooltips: {
                backgroundColor: 'rgb(20,90,105)',
                displayColors: false,
                cornerRadius: 6,
                xPadding: 10,
                yPadding: 8,
                titleAlign: 'center',
                position: 'average',
                mode: 'label',
              },
              elements: {
                arc: {
                  borderWidth: '10px',
                },
              },
            },
          }
        );
      }

      const machinePerformanceBar =  (ckmNumber) => {
        var id = 'machineStatusBar' + ckmNumber;
        var res = machinePerformanceData[ckmNumber].machine;
        <%- include('./machinePerformanceBar.ejs') %>
        loadMachineBarGraphs();
      }

      for (let ckmNumber = 0; ckmNumber < totalCkms; ckmNumber++) {
        ckmsStopsGraph(ckmNumber);
        ckmsStopsPerDefectTypeGraph(ckmNumber);
        ckmsStopsPerShiftGraph(ckmNumber);
        ckmsStopsPerDefectTypeMonthGraph(ckmNumber);
        ckmsStopsPerShiftForMonthgraph(ckmNumber);
        // machinePerformanceBar(ckmNumber)
      }
    }

    loadStopsFactory();
    loadStopsPerDefectTypeFactory();
    loadStopsPerDefectTypeForMonth();
    loadStopsPerShiftFactory();
    loadStopsPerShiftFactoryForMonth();
    loadCkmGraphs();
  }
</script>
